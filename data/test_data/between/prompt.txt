You are an expert on spatial relation analysis and code generation.

# Introduction to task
Your task is to write a Python class which can be used to compute the metric value of the existence of some spatial relationship between two objects in a 3D scene given their positions and sizes. Higher the metric value, higher the probability of the two objects have that relation. 

In the class, you will be given the positions and sizes of the objects in the scene. The class should have a method `forward` which returns a tensor of shape (N, N), where element (i, j) is the metric value of the relation between object i and object j.

In the 3D scene, x-y plane is the horizontal plane, z-axis is the vertical axis. 

Your `forward` method should return a tensor of shape (N, N, N), N is number of objects and the element (i, j, k) is the metric value of the relation between object i and object j and object k. The metric value should be 0 if the three objects don't have that relation, never set negative values!

# Introduction to programming environment

Here are examples class for `Near`, `Left` and `Right` relation. The class you write should have the same structure as the example class.

```python
class Near:
    def __init__(
        self, 
        object_locations: torch.Tensor) -> None:
        """
        Args:
            object_locations: torch.Tensor, shape (N, 6), N is the number of objects in the scene.
                The first three columns are the center of the object (x, y, z), 
                the last three columns are the size of the object (width, height, depth).
        """
        self.object_locations = object_locations.to(DEVICE)
        self._init_params()

    def _init_params(self) -> None:
        """
        Computing some necessary parameters about `Near` relation and initialize `self.param`.
        """
        # Based on average size to calculate a baseline distance
        sizes = self.object_locations[:, 3:]
        self.avg_size_norm = sizes.mean(dim=0).norm().to(DEVICE)

    def forward(self) -> torch.Tensor:
        """
        Return a tensor of shape (N, N), where element (i, j) is the metric value of the `Near` relation between object i and object j.
        """
        centers = self.object_locations[:, :3]
        sizes = self.object_locations[:, 3:]
        
        # Calculate the pairwise distances between object centers in a vectorized manner
        diff = centers.unsqueeze(1) - centers.unsqueeze(0)
        distances = diff.norm(dim=2)
        
        # Calculate the "nearness" metric based on distances and average size norm
        nearness_metric = torch.exp(-distances / (self.avg_size_norm + 1e-6))
        
        # Set diagonal to zero since an object cannot be near itself
        nearness_metric.fill_diagonal_(0)
        
        return nearness_metric.to(DEVICE)

class Left:
    def __init__(self, object_locations: torch.Tensor) -> None:
        """
        Args:
            object_locations: torch.Tensor, shape (N, 6), N is the number of objects in the scene.
                The first three columns are the center of the object (x, y, z), 
                the last three columns are the size of the object (width, height, depth).
        """
        self.object_locations = object_locations.to(DEVICE)
        self._init_params()

    def _init_params(self) -> None:
        """
        Computing some necessary parameters about `OnTheLeftOf` relation and initialize `self.param`.
        """
        sizes = self.object_locations[:, 3:]
        self.avg_size_norm = sizes.mean(dim=0).norm().to(DEVICE)

    def forward(self) -> torch.Tensor:
        """
        Return a tensor of shape (N, N), where element (i, j) is the metric value of the `OnTheLeftOf` relation between object i and object j.
        """
        centers = self.object_locations[:, :3]
        
        # Vector from observer at (0,0) to each object (only x, y are needed)
        observer_vectors = centers[:, :2]
        
        # Vector from object i to object j in the plane
        direction_vectors = centers.unsqueeze(1)[:, :, :2] - centers.unsqueeze(0)[:, :, :2]

        # Cross product to determine relative orientation in the x-y plane
        cross_products = (observer_vectors[:, 0].unsqueeze(1) * direction_vectors[:, :, 1] 
                          - observer_vectors[:, 1].unsqueeze(1) * direction_vectors[:, :, 0])

        # "Leftness" metric: larger values mean more to the left from observer's perspective
        leftness_metric = torch.relu(cross_products)

        # Normalize by considering distance between objects
        distances = direction_vectors.norm(dim=2) + 1e-6  # avoid division by zero
        leftness_metric = leftness_metric / distances
        
        # Set diagonal to zero since an object cannot be left of itself
        leftness_metric.fill_diagonal_(0)

        return leftness_metric.to(DEVICE)

class Right:
    def __init__(self, object_locations: torch.Tensor) -> None:
        """
        Args:
            object_locations: torch.Tensor, shape (N, 6), N is the number of objects in the scene.
                The first three columns are the center of the object (x, y, z), 
                the last three columns are the size of the object (width, height, depth).
        """
        self.object_locations = object_locations.to(DEVICE)
        self._init_params()

    def _init_params(self) -> None:
        """
        Computing some necessary parameters about `Right` relation and initialize `self.param`.
        """
        sizes = self.object_locations[:, 3:]
        self.avg_size_norm = sizes.mean(dim=0).norm().to(DEVICE)

    def forward(self) -> torch.Tensor:
        """
        Return a tensor of shape (N, N), where element (i, j) is the metric value of the `Right` relation between object i and object j.
        """
        centers = self.object_locations[:, :3]
        
        # Vector from observer at (0,0) to each object (only x, y are needed)
        observer_vectors = centers[:, :2]
        
        # Vector from object i to object j in the plane
        direction_vectors = centers[:, :2].unsqueeze(1) - centers[:, :2].unsqueeze(0)

        # Cross product to determine relative orientation in the x-y plane
        cross_products = (observer_vectors[:, 0].unsqueeze(1) * direction_vectors[:, :, 1] 
                          - observer_vectors[:, 1].unsqueeze(1) * direction_vectors[:, :, 0])

        # "Rightness" metric: larger values mean more to the right from observer's perspective
        rightness_metric = torch.relu(-cross_products)

        # Normalize by considering distance between objects
        distances = direction_vectors.norm(dim=2) + 1e-6  # avoid division by zero
        rightness_metric /= distances
        
        # Set diagonal to zero since an object cannot be right of itself
        rightness_metric.fill_diagonal_(0)

        return rightness_metric.to(DEVICE)
```
Make sure all tensors are placed on `DEVICE`, which has been defined in the environment.
The code output should be formatted as a python code string: "```python ... ```".

# Some helpful tips

(1) You should only use the given variables, and you should not introduce new variables.
(2) The metric value should be sensitive to the input arguments, which means if the arguments change a little, the value should change a lot.
(3) The metric value should be 0 if the two objects don't have that relation, never set negative values!
(4) Never treat an object as its center point, you must consider the size of the bounding box, just like the example code. Never set an threshold to determine the relation. The value of the relation should be continuous and sparse. 
(5) You should imagine that you are at position (0, 0) to determine the relative positions. You should consider more on horizontal plane(x-y plane) than the vertical axis(z-axis).
(6) Remember you are **in** the scene and look around, not look from the top. So never use the same way as 2D environment.
(7) Don't use any of x-coordinate or y-coordinate to determine relations, your method should work for every perspective.

Now I will give you your task. Remember above guidelines and write the Python class which can compute the probability of spatial relation among multiple 3D objects in a scene. Don't re-define `Near`, `Left` and `Right` class in your code. It has been defined.
