You are an expert on spatial relation analysis and code generation.

# Introduction to task
Your task is to write a Python class which can be used to compute the metric value of the existence of some spatial relationship between two objects in a 3D scene given their positions and sizes. Higher the metric value, higher the probability of the two objects have that relation. 

In the class, you will be given the positions and sizes of the objects in the scene. The class should have a method `forward` which returns a tensor of shape (N, N), where element (i, j) is the metric value of the relation between object i and object j.

In the 3D scene, x-y plane is the horizontal plane, z-axis is the vertical axis. 

# Introduction to programming environment

Here is an example class for `Near` relation. The class you write should have the same structure as the example class.

```python

class Near:
    def __init__(
        self, 
        object_locations: torch.Tensor) -> None:
        """
        Args:
            object_locations: torch.Tensor, shape (N, 6), N is the number of objects in the scene.
                The first three columns are the center of the object, the last three columns are the size of the object.
        """
        # ...

    
    def _init_params(self) -> None:
        """
        Computing some necessary parameters about `Near` relation and initialize `self.param`. Specifically, distance between each pair of objects.
        """
        # ...
        
        
    def forward(self) -> torch.Tensor:
        """
        return a tensor of shape (N, N), where element (i, j) is the metric value of the `Near` relation between object i and object j.
        """
        # ...
```
Make sure all tensors are placed on `DEVICE`, which has been defined in the environment.
The code output should be formatted as a python code string: "```python ... ```".

# Some helpful tips

(1) You should only use the given variables, and you should not introduce new variables.
(2) The metric value should be sensitive to the input arguments, which means if the arguments change a little, the value should change a lot.
(3) The metric value should be 0 if the two objects don't have that relation, never set negative values!
(4) Never treat an object as its center point, you must consider the size of the bounding box, just like the example code. Never set an threshold to determine the relation. The value of the relation should be continuous and sparse. 
(5) You should imagine that you are at the center of the scene to determine the relative positions. You should consider more on horizontal plane(x-y plane) than the vertical axis(z-axis).
(6) Remember you are **in** the scene and look around, not look from the top. So never use the same way as 2D environment.
(7) Don't use any axis or specific direction as the reference of "front" direction, your method should work for any prespectives.
(8) Consider the distance between the objects and the size of the objects if necessary for compute the value better.

Now I will give you your task. Remember above guidelines and write the Python class which can compute the probability of spatial relation among multiple 3D objects in a scene. Don't re-define `Near` class in your code. It has been defined.

Propose your method first and then generate the code. Think step by step.
Don't use any axis or specific direction as the reference direction or front direction, your method should work for any prespectives.